{"version":3,"sources":["components/Snake/index.js","components/Food/index.js","components/InstructionBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["snakeDots","map","dot","i","style","top","left","className","key","props","food","InstructionBoard","isFirstGame","score","startGame","onClick","getRandomPosition","max","min","Math","floor","random","initialState","alive","gameCount","speed","direction","bestScore","App","state","intervalID","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","prevProps","prevState","this","setInterval","document","onkeydown","checkIfInsideCanvas","checkIfCollapsed","ifEaten","clearInterval","onGameOver","currentScore","enlargeSnake","snake","unshift","pop","forEach","Snake","Food","React","PureComponent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAGe,G,KAAA,YACb,OAD8B,EAAfA,UACEC,KAAI,SAACC,EAAKC,GACzB,IAAMC,EAAQ,CACZC,IAAI,GAAD,OAAKH,EAAI,GAAT,KACHI,KAAK,GAAD,OAAKJ,EAAI,GAAT,MAEN,OAAO,yBAAKK,UAAU,YAAYH,MAAOA,EAAOI,IAAKL,SCN1C,WAAAM,GACb,IAAML,EAAQ,CACZC,IAAI,GAAD,OAAKI,EAAMC,KAAK,GAAhB,KACHJ,KAAK,GAAD,OAAKG,EAAMC,KAAK,GAAhB,MAEN,OAAO,yBAAKH,UAAU,aAAaH,MAAOA,KCwB7BO,EA7BU,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UA0B7C,OAAOF,EAvBH,yBAAKL,UAAU,eACb,yBAAKA,UAAU,kBAAkBQ,QAASD,GACxC,6CAOJ,yBAAKP,UAAU,eACb,yBAAKA,UAAU,mBACb,+CAAiBM,KAEnB,yBAAKN,UAAU,uBACb,2CAEF,yBAAKA,UAAU,kBAAkBQ,QAASD,GACxC,gDCdJE,EAAoB,SAACC,EAAKC,GAK9B,MAAO,CAPQ,EAIbC,KAAKC,OAAOD,KAAKE,UAAYJ,EAAMC,EAAM,GAAKA,GAJjC,KAMbC,KAAKC,OAAOD,KAAKE,UAAYJ,EAAMC,EAAM,GAAKA,GANjC,KAUXI,EAAe,CACnBC,OAAO,EACPC,UAAW,EACXd,KAAMM,EAAkB,EAAG,IAC3BS,MAAO,IACPC,UAAW,QACX1B,UAAW,CAAC,CAAC,EAAG,GAAI,CAhBL,EAgBgB,IAC/B2B,UAAW,GAuKEC,E,4MAnKbC,MAAQP,E,EACRQ,WAAa,E,EAkBbC,UAAY,SAAAC,GAAM,IACTN,EAAa,EAAKG,MAAlBH,UAEP,QADAM,EAAIA,GAAKC,OAAOC,OACNC,SACR,KAAK,GACe,SAAdT,GACF,EAAKU,SAAS,CAACV,UAAW,OAE5B,MACF,KAAK,GACe,OAAdA,GACF,EAAKU,SAAS,CAACV,UAAW,SAE5B,MACF,KAAK,GACe,UAAdA,GACF,EAAKU,SAAS,CAACV,UAAW,SAE5B,MACF,KAAK,GACe,SAAdA,GACF,EAAKU,SAAS,CAACV,UAAW,UAE5B,MACF,QACE,S,EAINW,UAAY,WACV,IAAIC,EAAI,YAAO,EAAKT,MAAM7B,WACtBuC,EAAOD,EAAKA,EAAKE,OAAS,GAE9B,OAAQ,EAAKX,MAAMH,WACjB,IAAK,QACHa,EAAO,CAACA,EAAK,GA3EJ,EA2EmBA,EAAK,IACjC,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GA9EJ,EA8EmBA,EAAK,IACjC,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAjFb,GAkFT,MACF,IAAK,KACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GApFb,GAqFT,MACF,QACE,OAGJD,EAAKG,KAAKF,GACVD,EAAKI,QACL,EAAKN,SAAS,CACZpC,UAAWsC,K,EAsDfxB,UAAY,WACV,EAAKsB,SAAS,CACZV,UAAW,QACX1B,UAAW,CAAC,CAAC,EAAG,GAAI,CAtJT,EAsJoB,IAC/BuB,OAAO,K,iEA/HQoB,EAAWC,GAAY,IACjCrB,EAASsB,KAAKhB,MAAdN,MACHsB,KAAKhB,MAAMN,QAAUqB,EAAUrB,OAASA,IAC1CsB,KAAKf,WAAagB,YAAYD,KAAKR,UAAW,KAC9CU,SAASC,UAAYH,KAAKd,WAExBR,IACFsB,KAAKI,sBACLJ,KAAKK,mBACLL,KAAKM,WAEF5B,GACH6B,cAAcP,KAAKf,c,4CA6DA,IACd9B,EAAa6C,KAAKhB,MAAlB7B,UACDuC,EAAOvC,EAAUA,EAAUwC,OAAS,IACtCD,EAAK,IAAM,KAAOA,EAAK,IAAM,KAAOA,EAAK,GAAK,GAAKA,EAAK,GAAK,IAC/DM,KAAKQ,e,mCAIK,IAAD,EAC+BR,KAAKhB,MAAxCL,EADI,EACJA,UAAWxB,EADP,EACOA,UAAW2B,EADlB,EACkBA,UACvB2B,EAAetD,EAAUwC,OAAS,EACxCK,KAAKT,SAAS,CACZb,OAAO,EACPC,UAAWA,EAAY,EACvBG,UAAW2B,EAAe3B,EAAY2B,EAAe3B,M,gCAI9C,IAAD,EACkBkB,KAAKhB,MAAxB7B,EADC,EACDA,UAAWU,EADV,EACUA,KACZ6B,EAAOvC,EAAUA,EAAUwC,OAAS,GACtCD,EAAK,KAAO7B,EAAK,IAAM6B,EAAK,KAAO7B,EAAK,KAC1CmC,KAAKT,SAAS,CACZ1B,KAAMM,EAAkB,EAAG,MAE7B6B,KAAKU,kB,qCAIO,IACPvD,EAAa6C,KAAKhB,MAAlB7B,UACHwD,EAAK,YAAOxD,GAChBwD,EAAMC,QAAQ,IACdZ,KAAKT,SAAS,CACZpC,UAAWwD,M,yCAIK,IAAD,OACVxD,EAAa6C,KAAKhB,MAAlB7B,UACHwD,EAAK,YAAOxD,GACVuC,EAAOiB,EAAMA,EAAMhB,OAAS,GAClCgB,EAAME,MACNF,EAAMG,SAAQ,SAAAzD,GACRqC,EAAK,KAAOrC,EAAI,IAAMqC,EAAK,KAAOrC,EAAI,IACxC,EAAKmD,kB,+BAaD,IAAD,EACgDR,KAAKhB,MAArDN,EADA,EACAA,MAAOC,EADP,EACOA,UAAWxB,EADlB,EACkBA,UAAWU,EAD7B,EAC6BA,KAAMiB,EADnC,EACmCA,UAC1C,OAAKJ,EAWH,oCACE,yBAAKhB,UAAU,aACb,kBAACqD,EAAD,CAAO5D,UAAWA,IAClB,kBAAC6D,EAAD,CAAMnD,KAAMA,KAEd,yBAAKH,UAAU,UACb,yBAAKA,UAAU,eAAf,0BAEE,GAFgDP,EAAUwC,OAC1D,KAEF,yBAAKjC,UAAU,eAAf,uBAA8CoB,MAlBhD,kBAAC,EAAD,CACEf,aAAcY,EACdX,MAAgC,GAAxBb,EAAUwC,OAAS,GAC3B1B,UAAW+B,KAAK/B,gB,GA9IRgD,IAAMC,eCfJC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d34cb752.chunk.js","sourcesContent":["import React from 'react';\nimport '../../App.css';\n\nexport default ({snakeDots}) => {\n  return snakeDots.map((dot, i) => {\n    const style = {\n      top: `${dot[1]}%`,\n      left: `${dot[0]}%`,\n    };\n    return <div className=\"snake-dot\" style={style} key={i} />;\n  });\n};\n","import React from 'react';\nimport '../../App.css';\n\nexport default props => {\n  const style = {\n    top: `${props.food[1]}%`,\n    left: `${props.food[0]}%`,\n  };\n  return <div className=\"snake-food\" style={style} />;\n};\n","import React from 'react';\nimport '../../App.css';\n\nconst InstructionBoard = ({isFirstGame, score, startGame}) => {\n  const renderStartBoard = () => {\n    return (\n      <div className=\"start-board\">\n        <div className=\"gradient-button\" onClick={startGame}>\n          <div>START GAME</div>\n        </div>\n      </div>\n    );\n  };\n  const renderGameOverBoard = () => {\n    return (\n      <div className=\"start-board\">\n        <div className=\"score-container\">\n          <div>{`SCORE - ${score}`}</div>\n        </div>\n        <div className=\"game-over-container\">\n          <div>GAME OVER</div>\n        </div>\n        <div className=\"gradient-button\" onClick={startGame}>\n          <div>RESTART GAME</div>\n        </div>\n      </div>\n    );\n  };\n\n  return isFirstGame ? renderStartBoard() : renderGameOverBoard();\n};\n\nexport default InstructionBoard;\n","import React from 'react';\nimport './App.css';\n\nimport Snake from './components/Snake';\nimport Food from './components/Food';\nimport InstructionBoard from './components/InstructionBoard';\n\nconst DOT_SIZE = 2;\n\nconst getRandomPosition = (max, min) => {\n  const x =\n    Math.floor((Math.random() * (max - min + 1) + min) / DOT_SIZE) * DOT_SIZE;\n  const y =\n    Math.floor((Math.random() * (max - min + 1) + min) / DOT_SIZE) * DOT_SIZE;\n  return [x, y];\n};\n\nconst initialState = {\n  alive: false,\n  gameCount: 0,\n  food: getRandomPosition(1, 98),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [DOT_SIZE, 0]],\n  bestScore: 0,\n};\n\nclass App extends React.PureComponent {\n  state = initialState;\n  intervalID = 0;\n\n  componentDidUpdate(prevProps, prevState) {\n    const {alive} = this.state;\n    if (this.state.alive !== prevState.alive && alive) {\n      this.intervalID = setInterval(this.moveSnake, 200);\n      document.onkeydown = this.onKeyDown;\n    }\n    if (alive) {\n      this.checkIfInsideCanvas();\n      this.checkIfCollapsed();\n      this.ifEaten();\n    }\n    if (!alive) {\n      clearInterval(this.intervalID);\n    }\n  }\n\n  onKeyDown = e => {\n    const {direction} = this.state;\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        if (direction !== 'DOWN') {\n          this.setState({direction: 'UP'});\n        }\n        break;\n      case 40:\n        if (direction !== 'UP') {\n          this.setState({direction: 'DOWN'});\n        }\n        break;\n      case 37:\n        if (direction !== 'RIGHT') {\n          this.setState({direction: 'LEFT'});\n        }\n        break;\n      case 39:\n        if (direction !== 'LEFT') {\n          this.setState({direction: 'RIGHT'});\n        }\n        break;\n      default:\n        return;\n    }\n  };\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + DOT_SIZE, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - DOT_SIZE, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + DOT_SIZE];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - DOT_SIZE];\n        break;\n      default:\n        return;\n    }\n\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots,\n    });\n  };\n\n  checkIfInsideCanvas() {\n    const {snakeDots} = this.state;\n    const head = snakeDots[snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  onGameOver() {\n    const {gameCount, snakeDots, bestScore} = this.state;\n    const currentScore = snakeDots.length - 2;\n    this.setState({\n      alive: false,\n      gameCount: gameCount + 1,\n      bestScore: currentScore > bestScore ? currentScore : bestScore,\n    });\n  }\n\n  ifEaten() {\n    const {snakeDots, food} = this.state;\n    const head = snakeDots[snakeDots.length - 1];\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomPosition(1, 98),\n      });\n      this.enlargeSnake();\n    }\n  }\n\n  enlargeSnake() {\n    const {snakeDots} = this.state;\n    let snake = [...snakeDots];\n    snake.unshift([]);\n    this.setState({\n      snakeDots: snake,\n    });\n  }\n\n  checkIfCollapsed() {\n    const {snakeDots} = this.state;\n    let snake = [...snakeDots];\n    const head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  startGame = () => {\n    this.setState({\n      direction: 'RIGHT',\n      snakeDots: [[0, 0], [DOT_SIZE, 0]],\n      alive: true,\n    });\n  };\n\n  render() {\n    const {alive, gameCount, snakeDots, food, bestScore} = this.state;\n    if (!alive) {\n      return (\n        <InstructionBoard\n          isFirstGame={!gameCount}\n          score={(snakeDots.length - 2) * 5}\n          startGame={this.startGame}\n        />\n      );\n    }\n\n    return (\n      <>\n        <div className=\"game-area\">\n          <Snake snakeDots={snakeDots} />\n          <Food food={food} />\n        </div>\n        <div className=\"footer\">\n          <div className=\"score-board\">{`CURRENT SCORE - ${(snakeDots.length -\n            2) *\n            5}`}</div>\n          <div className=\"score-board\">{`BEST SCORE - ${bestScore}`}</div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}